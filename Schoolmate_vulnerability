Schoolmate v1.3 (https://sourceforge.net/projects/schoolmate) was discovered to contain multiple SQL injection vulnerabilities via the $courseid and $teacherid parameters at DeleteFunctions.php.

DeleteFunctions.php:

193.	function deleteCourse($courseid)
194.	{
195.	 $query = mysql_query("DELETE FROM courses WHERE courseid = $courseid LIMIT 1")
196.	   or die("DeleteFunctions.php: Unable to delete the selected class(es) - ".mysql_error());
197.	
198.	 // Get registrations //
199.	 $q1 = mysql_query("DELETE FROM registrations WHERE courseid = $courseid");
200.	
201.	 // Get assignments //
202.	 $q2 = mysql_query("DELETE FROM assignments WHERE courseid = $courseid");
203.	
204.	 // Get grades //
205.	 $q3 = mysql_query("DELETE FROM grades WHERE courseid = $courseid");
206.	}

ManageClasses.php

78.	 if($_POST["deleteclass"] == 1)
79.	 {
80.	  require_once("DeleteFunctions.php");
81.	
82.	  $delete = $_POST["delete"];
83.	  for($i=0; $i<sizeof($delete); $i++)
84.	  {
85.	   $query = mysql_query("SELECT secondcourseid FROM courses WHERE courseid = $delete[$i]");
86.	   $secondclass = mysql_fetch_row($query);
87.	
88.	   deleteCourse($delete[$i]);
89.	   deleteCourse($secondclass[0]);
90.	  }
91.	 }


In DeleteFunctions.php, $courseid is passed into four SQL statements on lines 195, 199, 202, and 205 without any security validation operation. 
In ManageClasses.php, the call to deleteCourse on line 88 passes the post parameter $delete[$i] into the method without performing any security validation operations.
This can lead to risks such as data loss and database shutdown. For example, if the attacker sets the value to 1 or 1=1 # and stores it in the database, and then assigns this value to $courseid, 
then at line 195 of the code, the SQL statement executed would become DELETE FROM courses WHERE courseid = 1 or 1=1 # LIMIT 1. 
This would cause all data in the courses table to be deleted. This will cause all data in the courses table to be deleted, as well as the registrations, assignments, and grades tables.
If the attacker sets the value to 1; system shutdown;# and deposits it into the database, the SQL statement executed will be DELETE FROM courses WHERE courseid = 1; system shutdown;# LIMIT 1. 
At this point, the database is shut down, and subsequent statements are prevented from executing.





DeleteFunctions.php:

49.	function deleteTeacher($teacherid)
50.	{
51.	 $query = mysql_query("DELETE FROM teachers WHERE teacherid = $teacherid LIMIT 1")
52.	   or die("DeleteFunctions.php: Unable to delete selected Teacher(s) - ".mysql_error());
53.	}


ManageTeacher.php

41.	 if($_POST["deleteteacher"] == 1)
42.	 {
43.	  require_once("DeleteFunctions.php");
44.	
45.	  $delete = $_POST["delete"];
46.	  for($i=0; $i<sizeof($delete); $i++)
47.	  {
48.	   deleteTeacher($delete[$i]);
49.	  }
50.	 }

In DeleteFunctions.php, $teacherid is passed into SQL statements on lines 51 without any security validation operation. 
In ManageClasses.php, the call to deleteTeacher on line 48 passes the post parameter $delete[$i] into the method without performing any security validation operations.
This can lead to an SQL injection vulnerability similar to that of $courseid.
