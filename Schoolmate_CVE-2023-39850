Schoolmate v1.3 (https://sourceforge.net/projects/schoolmate) was discovered to contain multiple SQL injection vulnerabilities(CVE-2023-39850) via the $courseid and $teacherid parameters at DeleteFunctions.php.

DeleteFunctions.php:

193.	function deleteCourse($courseid)
194.	{
195.	 $query = mysql_query("DELETE FROM courses WHERE courseid = $courseid LIMIT 1")
196.	   or die("DeleteFunctions.php: Unable to delete the selected class(es) - ".mysql_error());
197.	
198.	 // Get registrations //
199.	 $q1 = mysql_query("DELETE FROM registrations WHERE courseid = $courseid");
200.	
201.	 // Get assignments //
202.	 $q2 = mysql_query("DELETE FROM assignments WHERE courseid = $courseid");
203.	
204.	 // Get grades //
205.	 $q3 = mysql_query("DELETE FROM grades WHERE courseid = $courseid");
206.	}

ManageClasses.php

78.	 if($_POST["deleteclass"] == 1)
79.	 {
80.	  require_once("DeleteFunctions.php");
81.	
82.	  $delete = $_POST["delete"];
83.	  for($i=0; $i<sizeof($delete); $i++)
84.	  {
85.	   $query = mysql_query("SELECT secondcourseid FROM courses WHERE courseid = $delete[$i]");
86.	   $secondclass = mysql_fetch_row($query);
87.	
88.	   deleteCourse($delete[$i]);
89.	   deleteCourse($secondclass[0]);
90.	  }
91.	 }



In the DeleteFunctions.php file, the variable $courseid is directly inserted into four SQL statements at lines 195, 199, 202, and 205, without undergoing any security validation process.
In the ManageClasses.php file, the call to the deleteCourse method on line 88 passes the POST parameter $delete[$i] without performing any security validation.
This situation introduces potential risks such as data loss and database shutdown. For instance, if an attacker sets the value to 1 or 1=1 # and stores it in the database, then assigns this value to $courseid, the SQL statement executed at line 195 would become:
DELETE FROM courses WHERE courseid = 1 or 1=1 # LIMIT 1.
As a result, all data in the courses table, as well as the registrations, assignments, and grades tables, could be deleted.
Similarly, if the attacker sets the value to 1; system shutdown;# and inserts it into the database, the executed SQL statement would be:
DELETE FROM courses WHERE courseid = 1; system shutdown;# LIMIT 1.
At this point, the database would be shut down, and subsequent statements would be prevented from execution.





DeleteFunctions.php:

49.	function deleteTeacher($teacherid)
50.	{
51.	 $query = mysql_query("DELETE FROM teachers WHERE teacherid = $teacherid LIMIT 1")
52.	   or die("DeleteFunctions.php: Unable to delete selected Teacher(s) - ".mysql_error());
53.	}


ManageTeacher.php

41.	 if($_POST["deleteteacher"] == 1)
42.	 {
43.	  require_once("DeleteFunctions.php");
44.	
45.	  $delete = $_POST["delete"];
46.	  for($i=0; $i<sizeof($delete); $i++)
47.	  {
48.	   deleteTeacher($delete[$i]);
49.	  }
50.	 }

In the DeleteFunctions.php file, the variable $teacherid is directly incorporated into SQL statements at line 51, without undergoing any security validation process.
In the ManageClasses.php file, the call to the deleteTeacher method on line 48 passes the POST parameter $delete[$i] without performing any security validation.
This situation can result in an SQL injection vulnerability similar to that observed with the $courseid variable.
