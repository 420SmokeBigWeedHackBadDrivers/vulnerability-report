Pikachu v1.0 was discovered to contain a SQL injection vulnerability via the $username parameter at \inc\function.php.

132.	function check_sqli_login($link){
133.	    if(isset($_COOKIE['ant']['uname']) && isset($_COOKIE['ant']['pw'])){
134.	        //这里如果不对获取的cookie进行转义，则会存在SQL注入漏洞，也会导致验证被绕过
135.	        //$username=escape($link, $_COOKIE['ant']['username']);
136.	        //$password=escape($link, $_COOKIE['ant']['password']);
137.	        $username=$_COOKIE['ant']['uname'];
138.	        $password=$_COOKIE['ant']['pw'];
139.	
140.	
141.	        $query="select * from users where username='$username' and sha1(password)='$password'";
142.	
143.	        $result=execute($link,$query);
144.	        if(mysqli_num_rows($result)==1){
145.	            $data=mysqli_fetch_assoc($result);
146.	            return $data['id'];
147.	        }else{
148.	            return false;
149.	        }
150.	    }else{
151.	        return false;
152.	    }
153.	}


At line 137 of the code, $username is retrieved from the cookie but passed directly into the $query statement without any validation or filtering. 
This approach has the potential for data loss or unauthorized access. 
For example, when an attacker stores $username=admin' or 1=1 # and $password=1 in a cookie, the resulting SQL statement is select * from users where username='admin' or 1=1 #' and sha1(password)='1'. 
This may lead to data leakage. Similarly, if an attacker stores $username=admin' and 1=1 #' and $password=1 in a cookie, 
the SQL statement executed is select * from users where username='admin' and 1=1 #' and sha1(password)='1'. At this point, the attacker can gain full access to the admin user.
